var searchIndex = {};
searchIndex['oauth-client'] = {"items":[[0,"","oauth-client",""],[1,"Token","",""],[11,"key","","",0],[11,"secret","","",0],[3,"authorization_header","",""],[3,"get","",""],[3,"post","",""],[4,"ParamList","",""],[10,"fmt","","",0],[10,"clone","","",0],[10,"new","","",0]],"paths":[[1,"Token"]]};
searchIndex['crypto'] = {"items":[[0,"","crypto",""],[0,"aes","",""],[2,"KeySize","crypto::aes","AES key size"],[12,"KeySize128","","",0],[12,"KeySize192","","",0],[12,"KeySize256","","",0],[3,"ecb_encryptor","","Get the best implementation of an EcbEncryptor"],[3,"ecb_decryptor","","Get the best implementation of an EcbDecryptor"],[3,"cbc_encryptor","","Get the best implementation of a CbcEncryptor"],[3,"cbc_decryptor","","Get the best implementation of a CbcDecryptor"],[3,"ctr","","Get the best implementation of a Ctr"],[0,"aessafe","crypto","The `aessafe` module implements the AES algorithm completely in software without using any table\nlookups or other timing dependant mechanisms. This module actually contains two seperate\nimplementations - an implementation that works on a single block at a time and a second\nimplementation that processes 8 blocks in parallel. Some block encryption modes really only work if\nyou are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes\nare trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for\ngreater efficiency, especially when using wide registers, such as the XMM registers available in\nx86 processors."],[1,"u32x4","crypto::aessafe",""],[1,"AesSafe128Encryptor","",""],[1,"AesSafe128Decryptor","",""],[1,"AesSafe192Encryptor","",""],[1,"AesSafe192Decryptor","",""],[1,"AesSafe256Encryptor","",""],[1,"AesSafe256Decryptor","",""],[1,"AesSafe128EncryptorX8","",""],[1,"AesSafe128DecryptorX8","",""],[1,"AesSafe192EncryptorX8","",""],[1,"AesSafe192DecryptorX8","",""],[1,"AesSafe256EncryptorX8","",""],[1,"AesSafe256DecryptorX8","",""],[10,"eq","","",1],[10,"ne","","",1],[10,"new","","",2],[10,"new","","",3],[10,"block_size","","",2],[10,"encrypt_block","","",2],[10,"block_size","","",3],[10,"decrypt_block","","",3],[10,"new","","",4],[10,"new","","",5],[10,"block_size","","",4],[10,"encrypt_block","","",4],[10,"block_size","","",5],[10,"decrypt_block","","",5],[10,"new","","",6],[10,"new","","",7],[10,"block_size","","",6],[10,"encrypt_block","","",6],[10,"block_size","","",7],[10,"decrypt_block","","",7],[10,"new","","",8],[10,"new","","",9],[10,"block_size","","",8],[10,"encrypt_block_x8","","",8],[10,"block_size","","",9],[10,"decrypt_block_x8","","",9],[10,"new","","",10],[10,"new","","",11],[10,"block_size","","",10],[10,"encrypt_block_x8","","",10],[10,"block_size","","",11],[10,"decrypt_block_x8","","",11],[10,"new","","",12],[10,"new","","",13],[10,"block_size","","",12],[10,"encrypt_block_x8","","",12],[10,"block_size","","",13],[10,"decrypt_block_x8","","",13],[4,"Output","",""],[10,"bitxor","","",1],[4,"Output","",""],[10,"bitand","","",1],[4,"Output","",""],[10,"not","","",1],[10,"default","","",1],[0,"bcrypt","crypto",""],[3,"bcrypt","crypto::bcrypt",""],[0,"bcrypt_pbkdf","crypto",""],[3,"bcrypt_pbkdf","crypto::bcrypt_pbkdf",""],[0,"blake2b","crypto",""],[1,"Blake2b","crypto::blake2b",""],[10,"new","","",14],[10,"new_keyed","","",14],[10,"blake2b","","",14],[10,"reset","","",14],[10,"input","","",14],[10,"result","","",14],[10,"output_bits","","",14],[10,"block_size","","",14],[10,"input","","Process input data.",14],[10,"reset","","Reset the Mac state to begin processing another input stream.",14],[10,"result","","Obtain the result of a Mac computation as a MacResult.",14],[10,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully\nsince incorrect use of the Mac code could result in permitting a timing attack which defeats\nthe security provided by a Mac function.",14],[10,"output_bytes","","Get the size of the Mac code, in bytes.",14],[0,"blockmodes","crypto",""],[1,"NoPadding","crypto::blockmodes","No padding mode for ECB and CBC encryption"],[1,"PkcsPadding","","PKCS padding mode for ECB and CBC encryption"],[1,"EncPadding","","Wraps a PaddingProcessor so that only pad_input() will actually be called."],[1,"DecPadding","","Wraps a PaddingProcessor so that only strip_output() will actually be called."],[1,"EcbEncryptor","","ECB Encryption mode"],[1,"EcbDecryptor","","ECB Decryption mode"],[1,"CbcEncryptor","","CBC encryption mode"],[1,"CbcDecryptor","","CBC decryption mode"],[1,"CtrMode","","CTR Mode"],[1,"CtrModeX8","","CTR Mode that operates on 8 blocks at a time"],[6,"PaddingProcessor","","A PaddingProcessor handles adding or removing padding"],[9,"pad_input","","Add padding to the last block of input data\nIf the mode can't handle a non-full block, it signals that error by simply leaving the block\nas it is which will be detected as an InvalidLength error.",15],[9,"strip_output","","Remove padding from the last block of output data\nIf false is returned, the processing fails",15],[10,"pad_input","","",16],[10,"strip_output","","",16],[10,"pad_input","","",17],[10,"strip_output","","",17],[10,"pad_input","","",18],[10,"strip_output","","",18],[10,"pad_input","","",19],[10,"strip_output","","",19],[10,"new","","Create a new ECB encryption mode object",20],[10,"reset","","",20],[10,"encrypt","","",20],[10,"new","","Create a new ECB decryption mode object",21],[10,"reset","","",21],[10,"decrypt","","",21],[10,"new","","Create a new CBC encryption mode object",22],[10,"reset","","",22],[10,"encrypt","","",22],[10,"new","","Create a new CBC decryption mode object",23],[10,"reset","","",23],[10,"decrypt","","",23],[10,"new","","Create a new CTR object",24],[10,"reset","","",24],[10,"process","","",24],[10,"encrypt","","",24],[10,"decrypt","","",24],[10,"new","","Create a new CTR object that operates on 8 blocks at a time",25],[10,"reset","","",25],[10,"process","","",25],[10,"encrypt","","",25],[10,"decrypt","","",25],[0,"blowfish","crypto",""],[1,"Blowfish","crypto::blowfish",""],[10,"new","","",26],[10,"init_state","","",26],[10,"expand_key","","",26],[10,"salted_expand_key","","",26],[10,"encrypt","","",26],[10,"block_size","","",26],[10,"encrypt_block","","",26],[10,"block_size","","",26],[10,"decrypt_block","","",26],[0,"buffer","crypto",""],[1,"RefReadBuffer","crypto::buffer",""],[1,"OwnedReadBuffer","",""],[1,"RefWriteBuffer","",""],[1,"BorrowedWriteBuffer","",""],[1,"OwnedWriteBuffer","",""],[2,"BufferResult","",""],[12,"BufferUnderflow","","",27],[12,"BufferOverflow","","",27],[6,"ReadBuffer","",""],[9,"is_empty","","",28],[9,"is_full","","",28],[9,"remaining","","",28],[9,"capacity","","",28],[10,"position","","",28],[9,"rewind","","",28],[9,"truncate","","",28],[9,"reset","","",28],[9,"peek_next","","",28],[10,"peek_remaining","","",28],[9,"take_next","","",28],[10,"take_remaining","","",28],[10,"push_to","","",28],[6,"WriteBuffer","",""],[9,"is_empty","","",29],[9,"is_full","","",29],[9,"remaining","","",29],[9,"capacity","","",29],[10,"position","","",29],[9,"rewind","","",29],[9,"reset","","",29],[9,"peek_read_buffer","","",29],[9,"take_next","","",29],[10,"take_remaining","","",29],[9,"take_read_buffer","","",29],[10,"new","","",30],[10,"is_empty","","",30],[10,"is_full","","",30],[10,"remaining","","",30],[10,"capacity","","",30],[10,"rewind","","",30],[10,"truncate","","",30],[10,"reset","","",30],[10,"peek_next","","",30],[10,"take_next","","",30],[10,"new","","",31],[10,"new_with_len","","",31],[10,"into_write_buffer","","",31],[10,"borrow_write_buffer","","",31],[10,"is_empty","","",31],[10,"is_full","","",31],[10,"remaining","","",31],[10,"capacity","","",31],[10,"rewind","","",31],[10,"truncate","","",31],[10,"reset","","",31],[10,"peek_next","","",31],[10,"take_next","","",31],[10,"new","","",32],[10,"is_empty","","",32],[10,"is_full","","",32],[10,"remaining","","",32],[10,"capacity","","",32],[10,"rewind","","",32],[10,"reset","","",32],[10,"peek_read_buffer","","",32],[10,"take_next","","",32],[10,"take_read_buffer","","",32],[10,"is_empty","","",33],[10,"is_full","","",33],[10,"remaining","","",33],[10,"capacity","","",33],[10,"rewind","","",33],[10,"reset","","",33],[10,"peek_read_buffer","","",33],[10,"take_next","","",33],[10,"take_read_buffer","","",33],[10,"new","","",34],[10,"into_read_buffer","","",34],[10,"is_empty","","",34],[10,"is_full","","",34],[10,"remaining","","",34],[10,"capacity","","",34],[10,"rewind","","",34],[10,"reset","","",34],[10,"peek_read_buffer","","",34],[10,"take_next","","",34],[10,"take_read_buffer","","",34],[0,"chacha20","crypto",""],[1,"ChaCha20","crypto::chacha20",""],[10,"new","","",35],[10,"process","","",35],[10,"encrypt","","",35],[10,"decrypt","","",35],[0,"curve25519","crypto",""],[1,"Fe","crypto::curve25519",""],[1,"GeP2","",""],[1,"GeP3","",""],[1,"GeP1P1","",""],[1,"GePrecomp","",""],[1,"GeCached","",""],[3,"ge_scalarmult_base","",""],[3,"sc_reduce","",""],[3,"sc_muladd","",""],[3,"curve25519","",""],[3,"curve25519_base","",""],[10,"fmt","","",36],[10,"eq","","",36],[4,"Output","",""],[10,"add","","",36],[4,"Output","",""],[10,"sub","","",36],[4,"Output","",""],[10,"mul","","",36],[10,"from_bytes","","",36],[10,"to_bytes","","",36],[10,"maybe_swap_with","","",36],[10,"maybe_set","","",36],[10,"fmt","","",37],[10,"to_bytes","","",38],[10,"double_scalarmult_vartime","","",38],[10,"from_bytes_negate_vartime","","",37],[10,"to_bytes","","",37],[4,"Output","",""],[10,"add","","",37],[4,"Output","",""],[10,"add","","",37],[4,"Output","",""],[10,"sub","","",37],[4,"Output","",""],[10,"sub","","",37],[10,"maybe_set","","",39],[10,"select","","",39],[0,"digest","crypto",""],[6,"Digest","crypto::digest","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[9,"input","","Provide message data.",40],[9,"result","","Retrieve the digest result. This method may be called multiple times.",40],[9,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",40],[9,"output_bits","","Get the output size in bits.",40],[10,"output_bytes","","Get the output size in bytes.",40],[9,"block_size","","Get the block size in bytes.",40],[10,"input_str","","Convenience function that feeds a string into a digest.",40],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",40],[0,"ed25519","crypto",""],[3,"keypair","crypto::ed25519",""],[3,"signature","",""],[3,"verify","",""],[0,"fortuna","crypto","An implementation of the Fortuna CSPRNG"],[1,"Fortuna","crypto::fortuna","The `Fortuna` CSPRNG (PC 9.5)"],[18,"MIN_POOL_SIZE","","Length in bytes that the first pool must be before a \"catastrophic\nreseed\" is allowed to happen. (A direct reseed through the\n`SeedableRng` API is not affected by this limit.)"],[10,"new_unseeded","","Creates a new unseeded `Fortuna` (PC 9.5.4)",41],[10,"add_random_event","","Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)",41],[10,"fill_bytes","","Generate a bunch of random data into `dest` (PC 9.5.5)",41],[10,"next_u32","","",41],[10,"from_seed","","",41],[10,"reseed","","",41],[0,"ghash","crypto",""],[1,"Ghash","crypto::ghash","A structure representing the state of a GHASH computation"],[1,"GhashWithC","","A structure representing the state of a GHASH computation, after input for C was provided"],[10,"new","","Creates a new GHASH state, with `h` as the key",42],[10,"input_a","","Feeds data for GHASH's A input",42],[10,"input_c","","Feeds data for GHASH's C input",42],[10,"result","","Retrieve the digest result",42],[10,"input_c","","Feeds data for GHASH's C input",43],[10,"result","","Retrieve the digest result",43],[10,"input","","",42],[10,"reset","","",42],[10,"result","","",42],[10,"raw_result","","",42],[10,"output_bytes","","",42],[0,"hmac","crypto","This module implements the Hmac function - a Message Authentication Code using a Digest."],[1,"Hmac","crypto::hmac","The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest."],[10,"new","","Create a new Hmac instance.",44],[10,"input","","",44],[10,"reset","","",44],[10,"result","","",44],[10,"raw_result","","",44],[10,"output_bytes","","",44],[0,"mac","crypto","The mac module defines the Message Authentication Code (Mac) trait."],[1,"MacResult","crypto::mac","A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time."],[6,"Mac","","The Mac trait defines methods for a Message Authentication function."],[9,"input","","Process input data.",45],[9,"reset","","Reset the Mac state to begin processing another input stream.",45],[9,"result","","Obtain the result of a Mac computation as a MacResult.",45],[9,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully\nsince incorrect use of the Mac code could result in permitting a timing attack which defeats\nthe security provided by a Mac function.",45],[9,"output_bytes","","Get the size of the Mac code, in bytes.",45],[10,"new","","Create a new MacResult.",46],[10,"new_from_owned","","Create a new MacResult taking ownership of the specified code value.",46],[10,"code","","Get the code value. Be very careful using this method, since incorrect use of the code value\nmay permit timing attacks which defeat the security provided by the Mac function.",46],[10,"eq","","",46],[0,"md5","crypto",""],[1,"Md5","crypto::md5","The MD5 Digest algorithm"],[10,"new","","Construct a new instance of the MD5 Digest.",47],[10,"input","","",47],[10,"reset","","",47],[10,"result","","",47],[10,"output_bits","","",47],[10,"block_size","","",47],[0,"pbkdf2","crypto","This module implements the PBKDF2 Key Derivation Function as specified by\nhttp://tools.ietf.org/html/rfc2898."],[3,"pbkdf2","crypto::pbkdf2","Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides\nbetter security, so, applications that do not have a requirement to use PBKDF2 specifically\nshould consider using that function instead."],[3,"pbkdf2_simple","","pbkdf2_simple is a helper function that should be sufficient for the majority of cases where\nan application needs to use PBKDF2 to hash a password for storage. The result is a String that\ncontains the parameters used as part of its encoding. The pbkdf2_check function may be used on\na password to check if it is equal to a hashed value."],[3,"pbkdf2_check","","pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and\nreturns true if the passed in password hashes to the same value."],[0,"poly1305","crypto",""],[1,"Poly1305","crypto::poly1305",""],[10,"new","","",48],[10,"input","","",48],[10,"reset","","",48],[10,"result","","",48],[10,"raw_result","","",48],[10,"output_bytes","","",48],[0,"rc4","crypto","An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS\nNOT A FIXED TIME IMPLEMENTATION."],[1,"Rc4","crypto::rc4",""],[10,"new","","",49],[10,"process","","",49],[10,"encrypt","","",49],[10,"decrypt","","",49],[0,"ripemd160","crypto","An implementation of the RIPEMD-160 cryptographic hash."],[1,"Ripemd160","crypto::ripemd160","Structure representing the state of a Ripemd160 computation"],[10,"new","","",50],[10,"reset","","Resets the hash to its original state also clearing the buffer.\nTo be used in between hashing separate messages to avoid having\nto recreate and allocate the whole structure.",50],[10,"input","","Adds the input `msg` to the hash. This method can be called repeatedly\nfor use with streaming messages.",50],[10,"result","","Returns the resulting digest of the entire message.\nNote: `out` must be at least 20 bytes (160 bits)",50],[10,"output_bits","","Returns the size of the digest in bits",50],[10,"block_size","","Returns the block size the hash operates on in bytes",50],[0,"salsa20","crypto",""],[1,"Salsa20","crypto::salsa20",""],[10,"new","","",51],[10,"new_xsalsa20","","",51],[10,"process","","",51],[10,"encrypt","","",51],[10,"decrypt","","",51],[0,"scrypt","crypto","This module implements the Scrypt key derivation function as specified in [1]."],[1,"ScryptParams","crypto::scrypt","The Scrypt parameter values."],[3,"scrypt","","The scrypt key derivation function."],[3,"scrypt_simple","","scrypt_simple is a helper function that should be sufficient for the majority of cases where\nan application needs to use Scrypt to hash a password for storage. The result is a String that\ncontains the parameters used as part of its encoding. The scrypt_check function may be used on\na password to check if it is equal to a hashed value."],[3,"scrypt_check","","scrypt_check compares a password against the result of a previous call to scrypt_simple and\nreturns true if the passed in password hashes to the same value."],[10,"clone","","",52],[10,"new","","Create a new instance of ScryptParams.",52],[0,"sha1","crypto","An implementation of the SHA-1 cryptographic hash."],[1,"Sha1","crypto::sha1","Structure representing the state of a Sha1 computation"],[10,"new","","Construct a `sha` object",53],[10,"reset","","",53],[10,"input","","",53],[10,"result","","",53],[10,"output_bits","","",53],[10,"block_size","","",53],[0,"sha2","crypto",""],[1,"Sha512","crypto::sha2","The SHA-512 hash algorithm"],[1,"Sha384","","The SHA-384 hash algorithm"],[1,"Sha512Trunc256","","The SHA-512 hash algorithm with digest truncated to 256 bits"],[1,"Sha512Trunc224","","The SHA-512 hash algorithm with digest truncated to 224 bits"],[1,"Sha256","","The SHA-256 hash algorithm"],[1,"Sha224","","The SHA-224 hash algorithm"],[10,"new","","Construct an new instance of a SHA-512 digest.",54],[10,"input","","",54],[10,"result","","",54],[10,"reset","","",54],[10,"output_bits","","",54],[10,"block_size","","",54],[10,"new","","Construct an new instance of a SHA-384 digest.",55],[10,"input","","",55],[10,"result","","",55],[10,"reset","","",55],[10,"output_bits","","",55],[10,"block_size","","",55],[10,"new","","Construct an new instance of a SHA-512/256 digest.",56],[10,"input","","",56],[10,"result","","",56],[10,"reset","","",56],[10,"output_bits","","",56],[10,"block_size","","",56],[10,"new","","Construct an new instance of a SHA-512/224 digest.",57],[10,"input","","",57],[10,"result","","",57],[10,"reset","","",57],[10,"output_bits","","",57],[10,"block_size","","",57],[10,"new","","Construct an new instance of a SHA-256 digest.",58],[10,"input","","",58],[10,"result","","",58],[10,"reset","","",58],[10,"output_bits","","",58],[10,"block_size","","",58],[10,"new","","Construct an new instance of a SHA-224 digest.",59],[10,"input","","",59],[10,"result","","",59],[10,"reset","","",59],[10,"output_bits","","",59],[10,"block_size","","",59],[0,"symmetriccipher","crypto",""],[2,"SymmetricCipherError","crypto::symmetriccipher",""],[12,"InvalidLength","","",60],[12,"InvalidPadding","","",60],[6,"BlockEncryptor","",""],[9,"block_size","","",61],[9,"encrypt_block","","",61],[6,"BlockEncryptorX8","",""],[9,"block_size","","",62],[9,"encrypt_block_x8","","",62],[6,"BlockDecryptor","",""],[9,"block_size","","",63],[9,"decrypt_block","","",63],[6,"BlockDecryptorX8","",""],[9,"block_size","","",64],[9,"decrypt_block_x8","","",64],[6,"Encryptor","",""],[9,"encrypt","","",65],[6,"Decryptor","",""],[9,"decrypt","","",66],[6,"SynchronousStreamCipher","",""],[9,"process","","",67],[10,"process","alloc::boxed","",68],[10,"encrypt","","",68],[10,"decrypt","","",68],[0,"util","crypto",""],[3,"supports_aesni","crypto::util",""],[3,"fixed_time_eq","","Compare two vectors using a fixed number of operations. If the two vectors are not of equal\nlength, the function returns false immediately."],[0,"aesni","crypto",""],[1,"AesNiEncryptor","crypto::aesni",""],[1,"AesNiDecryptor","",""],[10,"new","","",69],[10,"new","","",70],[10,"block_size","","",69],[10,"encrypt_block","","",69],[10,"block_size","","",70],[10,"decrypt_block","","",70]],"paths":[[2,"KeySize"],[1,"u32x4"],[1,"AesSafe128Encryptor"],[1,"AesSafe128Decryptor"],[1,"AesSafe192Encryptor"],[1,"AesSafe192Decryptor"],[1,"AesSafe256Encryptor"],[1,"AesSafe256Decryptor"],[1,"AesSafe128EncryptorX8"],[1,"AesSafe128DecryptorX8"],[1,"AesSafe192EncryptorX8"],[1,"AesSafe192DecryptorX8"],[1,"AesSafe256EncryptorX8"],[1,"AesSafe256DecryptorX8"],[1,"Blake2b"],[6,"PaddingProcessor"],[1,"NoPadding"],[1,"PkcsPadding"],[1,"EncPadding"],[1,"DecPadding"],[1,"EcbEncryptor"],[1,"EcbDecryptor"],[1,"CbcEncryptor"],[1,"CbcDecryptor"],[1,"CtrMode"],[1,"CtrModeX8"],[1,"Blowfish"],[2,"BufferResult"],[6,"ReadBuffer"],[6,"WriteBuffer"],[1,"RefReadBuffer"],[1,"OwnedReadBuffer"],[1,"RefWriteBuffer"],[1,"BorrowedWriteBuffer"],[1,"OwnedWriteBuffer"],[1,"ChaCha20"],[1,"Fe"],[1,"GeP3"],[1,"GeP2"],[1,"GePrecomp"],[6,"Digest"],[1,"Fortuna"],[1,"Ghash"],[1,"GhashWithC"],[1,"Hmac"],[6,"Mac"],[1,"MacResult"],[1,"Md5"],[1,"Poly1305"],[1,"Rc4"],[1,"Ripemd160"],[1,"Salsa20"],[1,"ScryptParams"],[1,"Sha1"],[1,"Sha512"],[1,"Sha384"],[1,"Sha512Trunc256"],[1,"Sha512Trunc224"],[1,"Sha256"],[1,"Sha224"],[2,"SymmetricCipherError"],[6,"BlockEncryptor"],[6,"BlockEncryptorX8"],[6,"BlockDecryptor"],[6,"BlockDecryptorX8"],[6,"Encryptor"],[6,"Decryptor"],[6,"SynchronousStreamCipher"],[1,"Box"],[1,"AesNiEncryptor"],[1,"AesNiDecryptor"]]};

searchIndex['curl'] = {"items":[[0,"","curl",""],[1,"ErrCode","",""],[1,"Version","",""],[1,"Protocols","",""],[3,"version","",""],[3,"version_info","",""],[10,"is_success","","",0],[10,"code","","",0],[10,"fmt","","",0],[10,"description","","",0],[10,"version_str","","",1],[10,"version_major","","",1],[10,"version_minor","","",1],[10,"version_patch","","",1],[10,"host","","",1],[10,"is_ipv6_enabled","","",1],[10,"is_kerbos4_enabled","","",1],[10,"is_ssl_enabled","","",1],[10,"is_libz_enabled","","",1],[10,"is_ntlm_enabled","","",1],[10,"is_gss_negotiate_enabled","","",1],[10,"is_debug_enabled","","",1],[10,"is_async_dns_enabled","","",1],[10,"is_spengo_enabled","","",1],[10,"is_large_file_enabled","","",1],[10,"is_idn_enabled","","",1],[10,"is_sspi_enabled","","",1],[10,"is_conv_enabled","","",1],[10,"is_curl_debug_enabled","","",1],[10,"is_tls_auth_srp_enabled","","",1],[10,"is_ntlm_wb_enabled","","",1],[10,"is_http2_enabled","","",1],[10,"ssl_version","","",1],[10,"libz_version","","",1],[10,"protocols","","",1],[10,"ares_version","","",1],[10,"ares_version_num","","",1],[10,"idn_version","","",1],[10,"iconv_version","","",1],[10,"ssh_version","","",1],[10,"clone","","",2],[10,"next","","",2],[10,"fmt","","",2],[0,"http","",""],[1,"Response","curl::http",""],[3,"handle","",""],[0,"body","",""],[2,"Body","curl::http::body",""],[12,"FixedBody","","",3],[12,"ChunkedBody","","",3],[6,"ToBody","",""],[9,"to_body","","",4],[10,"get_size","","",3],[10,"read","","",3],[0,"handle","curl::http",""],[1,"Handle","curl::http::handle",""],[1,"Request","",""],[2,"Method","",""],[12,"Options","","",5],[12,"Get","","",5],[12,"Head","","",5],[12,"Post","","",5],[12,"Put","","",5],[12,"Delete","","",5],[12,"Trace","","",5],[12,"Connect","","",5],[6,"ToUrl","",""],[9,"with_url_str","","",6],[10,"new","","",7],[10,"timeout","","",7],[10,"connect_timeout","","",7],[10,"verbose","","",7],[10,"proxy","","",7],[10,"ssl_ca_path","","",7],[10,"ssl_ca_info","","",7],[10,"cookie_jar","","",7],[10,"cookie_file","","",7],[10,"cookies","","",7],[10,"get","","",7],[10,"head","","",7],[10,"post","","",7],[10,"put","","",7],[10,"delete","","",7],[10,"new","","",8],[10,"uri","","",8],[10,"body","","",8],[10,"content_type","","",8],[10,"content_length","","",8],[10,"chunked","","",8],[10,"expect_continue","","",8],[10,"header","","",8],[10,"get_header","","",8],[10,"headers","","",8],[10,"progress","","",8],[10,"follow_redirects","","",8],[10,"exec","","",8],[10,"with_url_str","collections::string","",9],[0,"header","curl::http",""],[3,"parse","curl::http::header","Simple header parser extracts the header name and value, stripping out\nstarting and trailing white space. It does not, however, normalize header\nvalue whitespace"],[10,"new","curl::http","",10],[10,"get_code","","",10],[10,"get_headers","","",10],[10,"get_header","","",10],[10,"get_body","","",10],[10,"move_body","","",10],[10,"fmt","","",10],[4,"Headers","",""],[4,"ProgressCb","curl",""]],"paths":[[1,"ErrCode"],[1,"Version"],[1,"Protocols"],[2,"Body"],[6,"ToBody"],[2,"Method"],[6,"ToUrl"],[1,"Handle"],[1,"Request"],[1,"String"],[1,"Response"]]};

searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>"],[1,"Ipv6Address","","A 128 bit IPv6 address"],[11,"pieces","","",0],[1,"Url","","The parsed representation of an absolute URL."],[11,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1],[11,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1],[11,"query","","The query string of the URL.",1],[11,"fragment","","The fragment identifier of the URL.",1],[1,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP."],[11,"username","","The username of the URL, as a possibly empty, pecent-encoded string.",2],[11,"password","","The password of the URL.",2],[11,"host","","The host of the URL, either a domain name or an IPv4 address",2],[11,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2],[11,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",2],[11,"path","","The path of the URL, as vector of pecent-encoded strings.",2],[1,"UrlParser","","A set of optional parameters for URL parsing."],[2,"Host","","The host name of an URL."],[12,"Domain","","A (DNS) domain name or an IPv4 address.",3],[12,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3],[2,"ParseError","","Errors that can occur during parsing."],[12,"EmptyHost","","",4],[12,"InvalidScheme","","",4],[12,"InvalidPort","","",4],[12,"InvalidIpv6Address","","",4],[12,"InvalidDomainCharacter","","",4],[12,"InvalidCharacter","","",4],[12,"InvalidBackslash","","",4],[12,"InvalidPercentEncoded","","",4],[12,"InvalidAtSymbolInUser","","",4],[12,"ExpectedTwoSlashes","","",4],[12,"ExpectedInitialSlash","","",4],[12,"NonUrlCodePoint","","",4],[12,"RelativeUrlWithScheme","","",4],[12,"RelativeUrlWithoutBase","","",4],[12,"RelativeUrlWithNonRelativeBase","","",4],[12,"NonAsciiDomainsNotSupportedYet","","",4],[12,"CannotSetJavascriptFragment","","",4],[12,"CannotSetPortWithFileLikeScheme","","",4],[12,"CannotSetUsernameWithNonRelativeScheme","","",4],[12,"CannotSetPasswordWithNonRelativeScheme","","",4],[12,"CannotSetHostPortWithNonRelativeScheme","","",4],[12,"CannotSetHostWithNonRelativeScheme","","",4],[12,"CannotSetPortWithNonRelativeScheme","","",4],[12,"CannotSetPathWithNonRelativeScheme","","",4],[2,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*."],[12,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5],[12,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5],[2,"SchemeType","","Determines the behavior of the URL parser for a given scheme."],[12,"NonRelative","","Indicate that the scheme is *non-relative*.",6],[12,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6],[12,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6],[3,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier."],[3,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme"],[10,"clone","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3],[10,"serialize","","Serialize the host as a string.",3],[10,"fmt","","",3],[10,"parse","","Parse an IPv6 address, without the [] square brackets.",0],[10,"serialize","","Serialize the IPv6 address to a string.",0],[10,"fmt","","",0],[10,"clone","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"description","","",4],[10,"fmt","","",4],[0,"percent_encoding","",""],[1,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded."],[3,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`."],[3,"percent_encode","","Percent-encode the given bytes."],[3,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`."],[3,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string."],[3,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`."],[3,"percent_decode","","Percent-decode the given bytes."],[3,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8."],[3,"from_hex","",""],[5,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data."],[5,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings."],[5,"DEFAULT_ENCODE_SET","","This encode set is used for path components."],[5,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords."],[5,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL."],[5,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL."],[5,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization."],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms."],[3,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[3,"serialize_owned","","Convert a slice of owned (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[3,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation."],[3,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`."],[3,"decode","","Convert Punycode to Unicode."],[3,"encode_str","","Convert an Unicode `str` to Punycode."],[3,"encode","","Convert Unicode to Punycode."],[0,"format","url","Formatting utilities for URLs."],[1,"PathFormatter","url::format","Formatter and serializer for URL path data."],[11,"path","","The path as a slice of string-like objects (String or &str).",7],[1,"UserInfoFormatter","","Formatter and serializer for URL username and password data."],[11,"username","","URL username as a string slice.",8],[11,"password","","URL password as an optional string slice.",8],[1,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field."],[11,"url","","",9],[10,"fmt","","",7],[10,"fmt","","",8],[10,"fmt","","",9],[4,"ErrorHandler","url","This is called on non-fatal parse errors."],[4,"ParseResult","",""],[6,"ToUrlPath","",""],[9,"to_url_path","","",10],[6,"FromUrlPath","",""],[9,"from_url_path","","",11],[10,"clone","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"hash","","",1],[10,"new","","Return a new UrlParser with default parameters.",12],[10,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",12],[10,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",12],[10,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",12],[10,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",12],[10,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",12],[10,"eq","","",6],[10,"ne","","",6],[10,"default_port","","",6],[10,"parse","","Parse an URL with the default `UrlParser` parameters.",1],[10,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1],[10,"serialize","","Return the serialization of this URL as a string.",1],[10,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1],[10,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1],[10,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1],[10,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1],[10,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1],[10,"username","","If the URL is in a *relative scheme*, return its username.",1],[10,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",1],[10,"password","","If the URL is in a *relative scheme*, return its password, if any.",1],[10,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1],[10,"serialize_userinfo","","Serialize the URL's username and password, if any.",1],[10,"host","","If the URL is in a *relative scheme*, return its structured host.",1],[10,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1],[10,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1],[10,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1],[10,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1],[10,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1],[10,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1],[10,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1],[10,"path","","If the URL is in a *relative scheme*, return its path components.",1],[10,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1],[10,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1],[10,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1],[10,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",1],[10,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",1],[10,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",1],[10,"encode","","",1],[10,"decode","","",1],[10,"fmt","","",1],[10,"fmt","","",5],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username.",2],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",2],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2],[10,"domain","","If the host is a domain, return the domain as a string.",2],[10,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2],[10,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2],[10,"serialize_path","","Serialize the path as a string.",2],[10,"serialize_userinfo","","Serialize the userinfo as a string.",2],[10,"fmt","","",2],[10,"to_url_path","std::path::posix","",13],[10,"to_url_path","std::path::windows","",14],[10,"from_url_path","std::path::posix","",13],[10,"from_url_path","std::path::windows","",14]],"paths":[[1,"Ipv6Address"],[1,"Url"],[1,"RelativeSchemeData"],[2,"Host"],[2,"ParseError"],[2,"SchemeData"],[2,"SchemeType"],[1,"PathFormatter"],[1,"UserInfoFormatter"],[1,"UrlNoFragmentFormatter"],[6,"ToUrlPath"],[6,"FromUrlPath"],[1,"UrlParser"],[1,"Path"],[1,"Path"]]};

searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[10,"encode","collections::dlist","",10],[10,"decode","","",10],[10,"encode","collections::ring_buf","",11],[10,"decode","","",11],[10,"encode","collections::btree::map","",12],[10,"decode","","",12],[10,"encode","collections::btree::set","",13],[10,"decode","","",13],[10,"encode","std::collections::hash::map","",14],[10,"decode","","",14],[10,"encode","std::collections::hash::set","",15],[10,"decode","","",15],[10,"encode","collections::vec_map","",16],[10,"decode","","",16],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[1,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[11,"char_set","","Character set to use",17],[11,"newline","","Newline to use",17],[11,"pad","","True to pad output with `=` characters",17],[11,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17],[2,"CharacterSet","","Available encoding character sets"],[12,"Standard","","The standard character set (uses `+` and `/`)",18],[12,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18],[2,"Newline","","Available newline types"],[12,"LF","","A linefeed (i.e. Unix-style newline)",19],[12,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19],[2,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[12,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20],[12,"InvalidBase64Length","","The input had an invalid length",20],[5,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[5,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[5,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[6,"ToBase64","","A trait for converting a value to base64 encoding."],[9,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21],[6,"FromBase64","","A trait for converting from base64 encoded values."],[9,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22],[10,"fmt","","",20],[10,"description","","",20],[10,"detail","","",20],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[2,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[12,"InvalidHexCharacter","","The input contained a character not part of the hex format",23],[12,"InvalidHexLength","","The input had an invalid length",23],[6,"ToHex","","A trait for converting a value to hexadecimal encoding"],[9,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24],[6,"FromHex","","A trait for converting hexadecimal encoded values"],[9,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25],[10,"fmt","","",23],[10,"description","","",23],[10,"detail","","",23],[0,"json","rustc-serialize","JSON parsing and serialization"],[1,"PrettyJson","rustc-serialize::json",""],[1,"AsJson","",""],[1,"AsPrettyJson","",""],[1,"Encoder","","A structure for implementing serialization to JSON."],[1,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[1,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[1,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[1,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[1,"Decoder","","A structure to decode JSON to values in rust."],[2,"Json","","Represents a json value"],[12,"I64","","",26],[12,"U64","","",26],[12,"F64","","",26],[12,"String","","",26],[12,"Boolean","","",26],[12,"Array","","",26],[12,"Object","","",26],[12,"Null","","",26],[2,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[12,"InvalidSyntax","","",27],[12,"InvalidNumber","","",27],[12,"EOFWhileParsingObject","","",27],[12,"EOFWhileParsingArray","","",27],[12,"EOFWhileParsingValue","","",27],[12,"EOFWhileParsingString","","",27],[12,"KeyMustBeAString","","",27],[12,"ExpectedColon","","",27],[12,"TrailingCharacters","","",27],[12,"TrailingComma","","",27],[12,"InvalidEscape","","",27],[12,"InvalidUnicodeCodePoint","","",27],[12,"LoneLeadingSurrogateInHexEscape","","",27],[12,"UnexpectedEndOfHexEscape","","",27],[12,"UnrecognizedHex","","",27],[12,"NotFourDigit","","",27],[12,"NotUtf8","","",27],[2,"ParserError","",""],[12,"SyntaxError","","msg, line, col",28],[12,"IoError","","",28],[2,"DecoderError","",""],[12,"ParseError","","",29],[12,"ExpectedError","","",29],[12,"MissingFieldError","","",29],[12,"UnknownVariantError","","",29],[12,"ApplicationError","","",29],[2,"JsonEvent","","The output of the streaming parser."],[12,"ObjectStart","","",30],[12,"ObjectEnd","","",30],[12,"ArrayStart","","",30],[12,"ArrayEnd","","",30],[12,"BooleanValue","","",30],[12,"I64Value","","",30],[12,"U64Value","","",30],[12,"F64Value","","",30],[12,"StringValue","","",30],[12,"NullValue","","",30],[12,"Error","","",30],[2,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[12,"Index","","",31],[12,"Key","","",31],[3,"error_str","","Returns a readable error string for a given error code."],[3,"decode","","Shortcut function to decode a JSON `&str` into an object"],[3,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[3,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[3,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[4,"Array","",""],[4,"Object","",""],[4,"BuilderError","",""],[4,"EncodeResult","",""],[4,"DecodeResult","",""],[6,"ToJson","","A trait for converting values to JSON"],[9,"to_json","","Converts the value of `self` to an instance of JSON",32],[10,"partial_cmp","","",26],[10,"lt","","",26],[10,"le","","",26],[10,"gt","","",26],[10,"ge","","",26],[10,"eq","","",26],[10,"ne","","",26],[10,"clone","","",26],[10,"eq","","",27],[10,"ne","","",27],[10,"clone","","",27],[10,"fmt","","",28],[10,"eq","","",28],[10,"ne","","",28],[10,"clone","","",28],[10,"fmt","","",29],[10,"eq","","",29],[10,"ne","","",29],[10,"clone","","",29],[10,"fmt","","",27],[10,"description","","",29],[10,"detail","","",29],[10,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",33],[4,"Error","",""],[10,"emit_nil","","",33],[10,"emit_uint","","",33],[10,"emit_u64","","",33],[10,"emit_u32","","",33],[10,"emit_u16","","",33],[10,"emit_u8","","",33],[10,"emit_int","","",33],[10,"emit_i64","","",33],[10,"emit_i32","","",33],[10,"emit_i16","","",33],[10,"emit_i8","","",33],[10,"emit_bool","","",33],[10,"emit_f64","","",33],[10,"emit_f32","","",33],[10,"emit_char","","",33],[10,"emit_str","","",33],[10,"emit_enum","","",33],[10,"emit_enum_variant","","",33],[10,"emit_enum_variant_arg","","",33],[10,"emit_enum_struct_variant","","",33],[10,"emit_enum_struct_variant_field","","",33],[10,"emit_struct","","",33],[10,"emit_struct_field","","",33],[10,"emit_tuple","","",33],[10,"emit_tuple_arg","","",33],[10,"emit_tuple_struct","","",33],[10,"emit_tuple_struct_arg","","",33],[10,"emit_option","","",33],[10,"emit_option_none","","",33],[10,"emit_option_some","","",33],[10,"emit_seq","","",33],[10,"emit_seq_elt","","",33],[10,"emit_map","","",33],[10,"emit_map_elt_key","","",33],[10,"emit_map_elt_val","","",33],[10,"new","","Creates a new encoder whose output will be written to the specified writer",34],[10,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34],[4,"Error","",""],[10,"emit_nil","","",34],[10,"emit_uint","","",34],[10,"emit_u64","","",34],[10,"emit_u32","","",34],[10,"emit_u16","","",34],[10,"emit_u8","","",34],[10,"emit_int","","",34],[10,"emit_i64","","",34],[10,"emit_i32","","",34],[10,"emit_i16","","",34],[10,"emit_i8","","",34],[10,"emit_bool","","",34],[10,"emit_f64","","",34],[10,"emit_f32","","",34],[10,"emit_char","","",34],[10,"emit_str","","",34],[10,"emit_enum","","",34],[10,"emit_enum_variant","","",34],[10,"emit_enum_variant_arg","","",34],[10,"emit_enum_struct_variant","","",34],[10,"emit_enum_struct_variant_field","","",34],[10,"emit_struct","","",34],[10,"emit_struct_field","","",34],[10,"emit_tuple","","",34],[10,"emit_tuple_arg","","",34],[10,"emit_tuple_struct","","",34],[10,"emit_tuple_struct_arg","","",34],[10,"emit_option","","",34],[10,"emit_option_none","","",34],[10,"emit_option_some","","",34],[10,"emit_seq","","",34],[10,"emit_seq_elt","","",34],[10,"emit_map","","",34],[10,"emit_map_elt_key","","",34],[10,"emit_map_elt_val","","",34],[10,"encode","","",26],[10,"from_reader","","Decodes a json value from an `&mut io::Reader`",26],[10,"from_str","","Decodes a json value from a string",26],[10,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Show`.",26],[10,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26],[10,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26],[10,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26],[10,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26],[10,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26],[10,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26],[10,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26],[10,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26],[10,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26],[10,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26],[10,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26],[10,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26],[10,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26],[10,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26],[10,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26],[10,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26],[10,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26],[10,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26],[10,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26],[10,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26],[4,"Output","",""],[10,"index","","",26],[4,"Output","",""],[10,"index","","",26],[10,"fmt","","",30],[10,"clone","","",30],[10,"eq","","",30],[10,"ne","","",30],[10,"fmt","","",31],[10,"clone","","",31],[10,"eq","","",31],[10,"ne","","",31],[10,"new","","",35],[10,"len","","Returns The number of elements in the Stack.",35],[10,"is_empty","","Returns true if the stack is empty.",35],[10,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35],[10,"is_equal_to","","Compares this stack with an array of StackElements.",35],[10,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35],[10,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35],[10,"top","","Returns the top-most element (if any).",35],[4,"Item","",""],[10,"next","","",36],[10,"new","","Creates the JSON parser.",36],[10,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36],[10,"new","","Create a JSON Builder.",37],[10,"build","","",37],[10,"new","","Creates a new decoder instance for decoding the specified JSON value.",38],[4,"Error","",""],[10,"read_nil","","",38],[10,"read_uint","","",38],[10,"read_u8","","",38],[10,"read_u16","","",38],[10,"read_u32","","",38],[10,"read_u64","","",38],[10,"read_int","","",38],[10,"read_i8","","",38],[10,"read_i16","","",38],[10,"read_i32","","",38],[10,"read_i64","","",38],[10,"read_f32","","",38],[10,"read_f64","","",38],[10,"read_bool","","",38],[10,"read_char","","",38],[10,"read_str","","",38],[10,"read_enum","","",38],[10,"read_enum_variant","","",38],[10,"read_enum_variant_arg","","",38],[10,"read_enum_struct_variant","","",38],[10,"read_enum_struct_variant_field","","",38],[10,"read_struct","","",38],[10,"read_struct_field","","",38],[10,"read_tuple","","",38],[10,"read_tuple_arg","","",38],[10,"read_tuple_struct","","",38],[10,"read_tuple_struct_arg","","",38],[10,"read_option","","",38],[10,"read_seq","","",38],[10,"read_seq_elt","","",38],[10,"read_map","","",38],[10,"read_map_elt_key","","",38],[10,"read_map_elt_val","","",38],[10,"error","","",38],[10,"to_json","","",26],[10,"to_json","collections::string","",0],[10,"to_json","collections::vec","",3],[10,"to_json","collections::btree::map","",12],[10,"to_json","std::collections::hash::map","",14],[10,"to_json","core::option","",4],[10,"fmt","rustc-serialize::json","Encodes a json value into a string",26],[10,"fmt","","Encodes a json value into a string",39],[10,"fmt","","Encodes a json value into a string",40],[10,"indent","","Set the indentation level for the emitted JSON",41],[10,"fmt","","Encodes a json value into a string",41],[10,"from_str","","",26],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[6,"Decoder","rustc-serialize",""],[17,"Error","rustc-serialize::Decoder",""],[9,"read_nil","rustc-serialize","",42],[9,"read_uint","","",42],[9,"read_u64","","",42],[9,"read_u32","","",42],[9,"read_u16","","",42],[9,"read_u8","","",42],[9,"read_int","","",42],[9,"read_i64","","",42],[9,"read_i32","","",42],[9,"read_i16","","",42],[9,"read_i8","","",42],[9,"read_bool","","",42],[9,"read_f64","","",42],[9,"read_f32","","",42],[9,"read_char","","",42],[9,"read_str","","",42],[9,"read_enum","","",42],[9,"read_enum_variant","","",42],[9,"read_enum_variant_arg","","",42],[9,"read_enum_struct_variant","","",42],[9,"read_enum_struct_variant_field","","",42],[9,"read_struct","","",42],[9,"read_struct_field","","",42],[9,"read_tuple","","",42],[9,"read_tuple_arg","","",42],[9,"read_tuple_struct","","",42],[9,"read_tuple_struct_arg","","",42],[9,"read_option","","",42],[9,"read_seq","","",42],[9,"read_seq_elt","","",42],[9,"read_map","","",42],[9,"read_map_elt_key","","",42],[9,"read_map_elt_val","","",42],[9,"error","","",42],[6,"Encoder","",""],[17,"Error","rustc-serialize::Encoder",""],[9,"emit_nil","rustc-serialize","",43],[9,"emit_uint","","",43],[9,"emit_u64","","",43],[9,"emit_u32","","",43],[9,"emit_u16","","",43],[9,"emit_u8","","",43],[9,"emit_int","","",43],[9,"emit_i64","","",43],[9,"emit_i32","","",43],[9,"emit_i16","","",43],[9,"emit_i8","","",43],[9,"emit_bool","","",43],[9,"emit_f64","","",43],[9,"emit_f32","","",43],[9,"emit_char","","",43],[9,"emit_str","","",43],[9,"emit_enum","","",43],[9,"emit_enum_variant","","",43],[9,"emit_enum_variant_arg","","",43],[9,"emit_enum_struct_variant","","",43],[9,"emit_enum_struct_variant_field","","",43],[9,"emit_struct","","",43],[9,"emit_struct_field","","",43],[9,"emit_tuple","","",43],[9,"emit_tuple_arg","","",43],[9,"emit_tuple_struct","","",43],[9,"emit_tuple_struct_arg","","",43],[9,"emit_option","","",43],[9,"emit_option_none","","",43],[9,"emit_option_some","","",43],[9,"emit_seq","","",43],[9,"emit_seq_elt","","",43],[9,"emit_map","","",43],[9,"emit_map_elt_key","","",43],[9,"emit_map_elt_val","","",43],[6,"Decodable","",""],[9,"decode","","",44],[6,"Encodable","",""],[9,"encode","","",45],[6,"DecoderHelpers","",""],[9,"read_to_vec","","",46],[6,"EncoderHelpers","",""],[9,"emit_from_vec","","",47]],"paths":[[1,"String"],[1,"Box"],[1,"Rc"],[1,"Vec"],[2,"Option"],[1,"Path"],[1,"Path"],[1,"Cell"],[1,"RefCell"],[1,"Arc"],[1,"DList"],[1,"RingBuf"],[1,"BTreeMap"],[1,"BTreeSet"],[1,"HashMap"],[1,"HashSet"],[1,"VecMap"],[1,"Config"],[2,"CharacterSet"],[2,"Newline"],[2,"FromBase64Error"],[6,"ToBase64"],[6,"FromBase64"],[2,"FromHexError"],[6,"ToHex"],[6,"FromHex"],[2,"Json"],[2,"ErrorCode"],[2,"ParserError"],[2,"DecoderError"],[2,"JsonEvent"],[2,"StackElement"],[6,"ToJson"],[1,"Encoder"],[1,"PrettyEncoder"],[1,"Stack"],[1,"Parser"],[1,"Builder"],[1,"Decoder"],[1,"PrettyJson"],[1,"AsJson"],[1,"AsPrettyJson"],[6,"Decoder"],[6,"Encoder"],[6,"Decodable"],[6,"Encodable"],[6,"DecoderHelpers"],[6,"EncoderHelpers"]]};

searchIndex['curl-sys'] = {"items":[[0,"","curl-sys",""],[1,"curl_version_info_data","",""],[11,"age","","",0],[11,"version","","",0],[11,"version_num","","",0],[11,"host","","",0],[11,"features","","",0],[11,"ssl_version","","",0],[11,"ssl_version_num","","",0],[11,"libz_version","","",0],[11,"protocols","","",0],[11,"ares","","",0],[11,"ares_num","","",0],[11,"libidn","","",0],[11,"iconv_ver_num","","",0],[11,"libssh_version","","",0],[2,"CURLversion","",""],[12,"CURL_VERSION_FIRST","","",1],[12,"CURL_VERSION_SECOND","","",1],[12,"CURL_VERSION_THIRD","","",1],[12,"CURL_VERSION_FOURTH","","",1],[12,"CURL_VERSION_LAST","","",1],[2,"CURLcode","",""],[12,"CURLE_OK","","",2],[12,"CURLE_UNSUPPORTED_PROTOCOL","","",2],[12,"CURLE_FAILED_INIT","","",2],[12,"CURLE_URL_MALFORMAT","","",2],[12,"CURLE_NOT_BUILT_IN","","",2],[12,"CURLE_COULDNT_RESOLVE_PROXY","","",2],[12,"CURLE_COULDNT_RESOLVE_HOST","","",2],[12,"CURLE_COULDNT_CONNECT","","",2],[12,"CURLE_FTP_WEIRD_SERVER_REPLY","","",2],[12,"CURLE_REMOTE_ACCESS_DENIED","","",2],[12,"CURLE_FTP_ACCEPT_FAILED","","",2],[12,"CURLE_FTP_WEIRD_PASS_REPLY","","",2],[12,"CURLE_FTP_ACCEPT_TIMEOUT","","",2],[12,"CURLE_FTP_WEIRD_PASV_REPLY","","",2],[12,"CURLE_FTP_WEIRD_227_FORMAT","","",2],[12,"CURLE_FTP_CANT_GET_HOST","","",2],[12,"CURLE_OBSOLETE16","","",2],[12,"CURLE_FTP_COULDNT_SET_TYPE","","",2],[12,"CURLE_PARTIAL_FILE","","",2],[12,"CURLE_FTP_COULDNT_RETR_FILE","","",2],[12,"CURLE_OBSOLETE20","","",2],[12,"CURLE_QUOTE_ERROR","","",2],[12,"CURLE_HTTP_RETURNED_ERROR","","",2],[12,"CURLE_WRITE_ERROR","","",2],[12,"CURLE_OBSOLETE24","","",2],[12,"CURLE_UPLOAD_FAILED","","",2],[12,"CURLE_READ_ERROR","","",2],[12,"CURLE_OUT_OF_MEMORY","","",2],[12,"CURLE_OPERATION_TIMEDOUT","","",2],[12,"CURLE_OBSOLETE29","","",2],[12,"CURLE_FTP_PORT_FAILED","","",2],[12,"CURLE_FTP_COULDNT_USE_REST","","",2],[12,"CURLE_OBSOLETE32","","",2],[12,"CURLE_RANGE_ERROR","","",2],[12,"CURLE_HTTP_POST_ERROR","","",2],[12,"CURLE_SSL_CONNECT_ERROR","","",2],[12,"CURLE_BAD_DOWNLOAD_RESUME","","",2],[12,"CURLE_FILE_COULDNT_READ_FILE","","",2],[12,"CURLE_LDAP_CANNOT_BIND","","",2],[12,"CURLE_LDAP_SEARCH_FAILED","","",2],[12,"CURLE_OBSOLETE40","","",2],[12,"CURLE_FUNCTION_NOT_FOUND","","",2],[12,"CURLE_ABORTED_BY_CALLBACK","","",2],[12,"CURLE_BAD_FUNCTION_ARGUMENT","","",2],[12,"CURLE_OBSOLETE44","","",2],[12,"CURLE_INTERFACE_FAILED","","",2],[12,"CURLE_OBSOLETE46","","",2],[12,"CURLE_TOO_MANY_REDIRECTS","","",2],[12,"CURLE_UNKNOWN_OPTION","","",2],[12,"CURLE_TELNET_OPTION_SYNTAX","","",2],[12,"CURLE_OBSOLETE50","","",2],[12,"CURLE_PEER_FAILED_VERIFICATION","","",2],[12,"CURLE_GOT_NOTHING","","",2],[12,"CURLE_SSL_ENGINE_NOTFOUND","","",2],[12,"CURLE_SSL_ENGINE_SETFAILED","","",2],[12,"CURLE_SEND_ERROR","","",2],[12,"CURLE_RECV_ERROR","","",2],[12,"CURLE_OBSOLETE57","","",2],[12,"CURLE_SSL_CERTPROBLEM","","",2],[12,"CURLE_SSL_CIPHER","","",2],[12,"CURLE_SSL_CACERT","","",2],[12,"CURLE_BAD_CONTENT_ENCODING","","",2],[12,"CURLE_LDAP_INVALID_URL","","",2],[12,"CURLE_FILESIZE_EXCEEDED","","",2],[12,"CURLE_USE_SSL_FAILED","","",2],[12,"CURLE_SEND_FAIL_REWIND","","",2],[12,"CURLE_SSL_ENGINE_INITFAILED","","",2],[12,"CURLE_LOGIN_DENIED","","",2],[12,"CURLE_TFTP_NOTFOUND","","",2],[12,"CURLE_TFTP_PERM","","",2],[12,"CURLE_REMOTE_DISK_FULL","","",2],[12,"CURLE_TFTP_ILLEGAL","","",2],[12,"CURLE_TFTP_UNKNOWNID","","",2],[12,"CURLE_REMOTE_FILE_EXISTS","","",2],[12,"CURLE_TFTP_NOSUCHUSER","","",2],[12,"CURLE_CONV_FAILED","","",2],[12,"CURLE_CONV_REQD","","",2],[12,"CURLE_SSL_CACERT_BADFILE","","",2],[12,"CURLE_REMOTE_FILE_NOT_FOUND","","",2],[12,"CURLE_SSH","","",2],[12,"CURLE_SSL_SHUTDOWN_FAILED","","",2],[12,"CURLE_AGAIN","","",2],[12,"CURLE_SSL_CRL_BADFILE","","",2],[12,"CURLE_SSL_ISSUER_ERROR","","",2],[12,"CURLE_FTP_PRET_FAILED","","",2],[12,"CURLE_RTSP_CSEQ_ERROR","","",2],[12,"CURLE_RTSP_SESSION_ERROR","","",2],[12,"CURLE_FTP_BAD_FILE_LIST","","",2],[12,"CURLE_CHUNK_FAILED","","",2],[12,"CURLE_NO_CONNECTION_AVAILABLE","","",2],[12,"CURLE_LAST","","",2],[3,"curl_easy_strerror","",""],[3,"curl_easy_init","",""],[3,"curl_easy_setopt","",""],[3,"curl_easy_perform","",""],[3,"curl_easy_cleanup","",""],[3,"curl_easy_getinfo","",""],[3,"curl_global_cleanup","",""],[3,"curl_slist_append","",""],[3,"curl_slist_free_all","",""],[3,"curl_version","",""],[3,"curl_version_info","",""],[4,"CURLINFO","",""],[4,"CURL","",""],[4,"curl_slist","",""],[4,"CURLoption","",""],[18,"CURL_READFUNC_ABORT","",""],[18,"CURLINFO_STRING","",""],[18,"CURLINFO_LONG","",""],[18,"CURLINFO_DOUBLE","",""],[18,"CURLINFO_SLIST","",""],[18,"CURLINFO_MASK","",""],[18,"CURLINFO_TYPEMASK","",""],[18,"CURLINFO_EFFECTIVE_URL","",""],[18,"CURLINFO_RESPONSE_CODE","",""],[18,"CURLINFO_TOTAL_TIME","",""],[18,"CURLOPTTYPE_LONG","",""],[18,"CURLOPTTYPE_OBJECTPOINT","",""],[18,"CURLOPTTYPE_FUNCTIONPOINT","",""],[18,"CURLOPTTYPE_OFF_T","",""],[18,"CURL_VERSION_NOW","",""],[18,"CURL_VERSION_IPV6","",""],[18,"CURL_VERSION_KERBEROS4","",""],[18,"CURL_VERSION_SSL","",""],[18,"CURL_VERSION_LIBZ","",""],[18,"CURL_VERSION_NTLM","",""],[18,"CURL_VERSION_GSSNEGOTIATE","",""],[18,"CURL_VERSION_DEBUG","",""],[18,"CURL_VERSION_ASYNCHDNS","",""],[18,"CURL_VERSION_SPNEGO","",""],[18,"CURL_VERSION_LARGEFILE","",""],[18,"CURL_VERSION_IDN","",""],[18,"CURL_VERSION_SSPI","",""],[18,"CURL_VERSION_CONV","",""],[18,"CURL_VERSION_CURLDEBUG","",""],[18,"CURL_VERSION_TLSAUTH_SRP","",""],[18,"CURL_VERSION_NTLM_WB","",""],[18,"CURL_VERSION_HTTP2","",""],[18,"CURLOPT_FILE","",""],[18,"CURLOPT_URL","",""],[18,"CURLOPT_PORT","",""],[18,"CURLOPT_PROXY","",""],[18,"CURLOPT_USERPWD","",""],[18,"CURLOPT_PROXYUSERPWD","",""],[18,"CURLOPT_RANGE","",""],[18,"CURLOPT_INFILE","",""],[18,"CURLOPT_ERRORBUFFER","",""],[18,"CURLOPT_WRITEFUNCTION","",""],[18,"CURLOPT_READFUNCTION","",""],[18,"CURLOPT_TIMEOUT","",""],[18,"CURLOPT_INFILESIZE","",""],[18,"CURLOPT_POSTFIELDS","",""],[18,"CURLOPT_REFERER","",""],[18,"CURLOPT_FTPPORT","",""],[18,"CURLOPT_USERAGENT","",""],[18,"CURLOPT_LOW_SPEED_LIMIT","",""],[18,"CURLOPT_LOW_SPEED_TIME","",""],[18,"CURLOPT_RESUME_FROM","",""],[18,"CURLOPT_COOKIE","",""],[18,"CURLOPT_HTTPHEADER","",""],[18,"CURLOPT_HTTPPOST","",""],[18,"CURLOPT_SSLCERT","",""],[18,"CURLOPT_KEYPASSWD","",""],[18,"CURLOPT_CRLF","",""],[18,"CURLOPT_QUOTE","",""],[18,"CURLOPT_WRITEHEADER","",""],[18,"CURLOPT_COOKIEFILE","",""],[18,"CURLOPT_SSLVERSION","",""],[18,"CURLOPT_TIMECONDITION","",""],[18,"CURLOPT_TIMEVALUE","",""],[18,"CURLOPT_CUSTOMREQUEST","",""],[18,"CURLOPT_STDERR","",""],[18,"CURLOPT_POSTQUOTE","",""],[18,"CURLOPT_WRITEINFO","",""],[18,"CURLOPT_VERBOSE","",""],[18,"CURLOPT_HEADER","",""],[18,"CURLOPT_NOPROGRESS","",""],[18,"CURLOPT_NOBODY","",""],[18,"CURLOPT_FAILONERROR","",""],[18,"CURLOPT_UPLOAD","",""],[18,"CURLOPT_POST","",""],[18,"CURLOPT_DIRLISTONLY","",""],[18,"CURLOPT_APPEND","",""],[18,"CURLOPT_NETRC","",""],[18,"CURLOPT_FOLLOWLOCATION","",""],[18,"CURLOPT_TRANSFERTEXT","",""],[18,"CURLOPT_PUT","",""],[18,"CURLOPT_PROGRESSFUNCTION","",""],[18,"CURLOPT_PROGRESSDATA","",""],[18,"CURLOPT_AUTOREFERER","",""],[18,"CURLOPT_PROXYPORT","",""],[18,"CURLOPT_POSTFIELDSIZE","",""],[18,"CURLOPT_HTTPPROXYTUNNEL","",""],[18,"CURLOPT_INTERFACE","",""],[18,"CURLOPT_KRBLEVEL","",""],[18,"CURLOPT_SSL_VERIFYPEER","",""],[18,"CURLOPT_CAINFO","",""],[18,"CURLOPT_MAXREDIRS","",""],[18,"CURLOPT_FILETIME","",""],[18,"CURLOPT_TELNETOPTIONS","",""],[18,"CURLOPT_MAXCONNECTS","",""],[18,"CURLOPT_CLOSEPOLICY","",""],[18,"CURLOPT_FRESH_CONNECT","",""],[18,"CURLOPT_FORBID_REUSE","",""],[18,"CURLOPT_RANDOM_FILE","",""],[18,"CURLOPT_EGDSOCKET","",""],[18,"CURLOPT_CONNECTTIMEOUT","",""],[18,"CURLOPT_HEADERFUNCTION","",""],[18,"CURLOPT_HTTPGET","",""],[18,"CURLOPT_SSL_VERIFYHOST","",""],[18,"CURLOPT_COOKIEJAR","",""],[18,"CURLOPT_SSL_CIPHER_LIST","",""],[18,"CURLOPT_HTTP_VERSION","",""],[18,"CURLOPT_FTP_USE_EPSV","",""],[18,"CURLOPT_SSLCERTTYPE","",""],[18,"CURLOPT_SSLKEY","",""],[18,"CURLOPT_SSLKEYTYPE","",""],[18,"CURLOPT_SSLENGINE","",""],[18,"CURLOPT_SSLENGINE_DEFAULT","",""],[18,"CURLOPT_DNS_USE_GLOBAL_CACHE","",""],[18,"CURLOPT_DNS_CACHE_TIMEOUT","",""],[18,"CURLOPT_PREQUOTE","",""],[18,"CURLOPT_DEBUGFUNCTION","",""],[18,"CURLOPT_DEBUGDATA","",""],[18,"CURLOPT_COOKIESESSION","",""],[18,"CURLOPT_CAPATH","",""],[18,"CURLOPT_BUFFERSIZE","",""],[18,"CURLOPT_NOSIGNAL","",""],[18,"CURLOPT_SHARE","",""],[18,"CURLOPT_PROXYTYPE","",""],[18,"CURLOPT_ACCEPT_ENCODING","",""],[18,"CURLOPT_PRIVATE","",""],[18,"CURLOPT_HTTP200ALIASES","",""],[18,"CURLOPT_UNRESTRICTED_AUTH","",""],[18,"CURLOPT_FTP_USE_EPRT","",""],[18,"CURLOPT_HTTPAUTH","",""],[18,"CURLOPT_SSL_CTX_FUNCTION","",""],[18,"CURLOPT_SSL_CTX_DATA","",""],[18,"CURLOPT_FTP_CREATE_MISSING_DIRS","",""],[18,"CURLOPT_PROXYAUTH","",""],[18,"CURLOPT_FTP_RESPONSE_TIMEOUT","",""],[18,"CURLOPT_IPRESOLVE","",""],[18,"CURLOPT_MAXFILESIZE","",""],[18,"CURLOPT_INFILESIZE_LARGE","",""],[18,"CURLOPT_RESUME_FROM_LARGE","",""],[18,"CURLOPT_MAXFILESIZE_LARGE","",""],[18,"CURLOPT_NETRC_FILE","",""],[18,"CURLOPT_USE_SSL","",""],[18,"CURLOPT_POSTFIELDSIZE_LARGE","",""],[18,"CURLOPT_TCP_NODELAY","",""],[18,"CURLOPT_FTPSSLAUTH","",""],[18,"CURLOPT_IOCTLFUNCTION","",""],[18,"CURLOPT_IOCTLDATA","",""],[18,"CURLOPT_FTP_ACCOUNT","",""],[18,"CURLOPT_COOKIELIST","",""],[18,"CURLOPT_IGNORE_CONTENT_LENGTH","",""],[18,"CURLOPT_FTP_SKIP_PASV_IP","",""],[18,"CURLOPT_FTP_FILEMETHOD","",""],[18,"CURLOPT_LOCALPORT","",""],[18,"CURLOPT_LOCALPORTRANGE","",""],[18,"CURLOPT_CONNECT_ONLY","",""],[18,"CURLOPT_CONV_FROM_NETWORK_FUNCTION","",""],[18,"CURLOPT_CONV_TO_NETWORK_FUNCTION","",""],[18,"CURLOPT_CONV_FROM_UTF8_FUNCTION","",""],[18,"CURLOPT_MAX_SEND_SPEED_LARGE","",""],[18,"CURLOPT_MAX_RECV_SPEED_LARGE","",""],[18,"CURLOPT_FTP_ALTERNATIVE_TO_USER","",""],[18,"CURLOPT_SOCKOPTFUNCTION","",""],[18,"CURLOPT_SOCKOPTDATA","",""],[18,"CURLOPT_SSL_SESSIONID_CACHE","",""],[18,"CURLOPT_SSH_AUTH_TYPES","",""],[18,"CURLOPT_SSH_PUBLIC_KEYFILE","",""],[18,"CURLOPT_SSH_PRIVATE_KEYFILE","",""],[18,"CURLOPT_FTP_SSL_CCC","",""],[18,"CURLOPT_TIMEOUT_MS","",""],[18,"CURLOPT_CONNECTTIMEOUT_MS","",""],[18,"CURLOPT_HTTP_TRANSFER_DECODING","",""],[18,"CURLOPT_HTTP_CONTENT_DECODING","",""],[18,"CURLOPT_NEW_FILE_PERMS","",""],[18,"CURLOPT_NEW_DIRECTORY_PERMS","",""],[18,"CURLOPT_POSTREDIR","",""],[18,"CURLOPT_SSH_HOST_PUBLIC_KEY_MD5","",""],[18,"CURLOPT_OPENSOCKETFUNCTION","",""],[18,"CURLOPT_OPENSOCKETDATA","",""],[18,"CURLOPT_COPYPOSTFIELDS","",""],[18,"CURLOPT_PROXY_TRANSFER_MODE","",""],[18,"CURLOPT_SEEKFUNCTION","",""],[18,"CURLOPT_SEEKDATA","",""],[18,"CURLOPT_CRLFILE","",""],[18,"CURLOPT_ISSUERCERT","",""],[18,"CURLOPT_ADDRESS_SCOPE","",""],[18,"CURLOPT_CERTINFO","",""],[18,"CURLOPT_USERNAME","",""],[18,"CURLOPT_PASSWORD","",""],[18,"CURLOPT_PROXYUSERNAME","",""],[18,"CURLOPT_PROXYPASSWORD","",""],[18,"CURLOPT_NOPROXY","",""],[18,"CURLOPT_TFTP_BLKSIZE","",""],[18,"CURLOPT_SOCKS5_GSSAPI_SERVICE","",""],[18,"CURLOPT_SOCKS5_GSSAPI_NEC","",""],[18,"CURLOPT_PROTOCOLS","",""],[18,"CURLOPT_REDIR_PROTOCOLS","",""],[18,"CURLOPT_SSH_KNOWNHOSTS","",""],[18,"CURLOPT_SSH_KEYFUNCTION","",""],[18,"CURLOPT_SSH_KEYDATA","",""],[18,"CURLOPT_MAIL_FROM","",""],[18,"CURLOPT_MAIL_RCPT","",""],[18,"CURLOPT_FTP_USE_PRET","",""],[18,"CURLOPT_RTSP_REQUEST","",""],[18,"CURLOPT_RTSP_SESSION_ID","",""],[18,"CURLOPT_RTSP_STREAM_URI","",""],[18,"CURLOPT_RTSP_TRANSPORT","",""],[18,"CURLOPT_RTSP_CLIENT_CSEQ","",""],[18,"CURLOPT_RTSP_SERVER_CSEQ","",""],[18,"CURLOPT_INTERLEAVEDATA","",""],[18,"CURLOPT_INTERLEAVEFUNCTION","",""],[18,"CURLOPT_WILDCARDMATCH","",""],[18,"CURLOPT_CHUNK_BGN_FUNCTION","",""],[18,"CURLOPT_CHUNK_END_FUNCTION","",""],[18,"CURLOPT_FNMATCH_FUNCTION","",""],[18,"CURLOPT_CHUNK_DATA","",""],[18,"CURLOPT_FNMATCH_DATA","",""],[18,"CURLOPT_RESOLVE","",""],[18,"CURLOPT_TLSAUTH_USERNAME","",""],[18,"CURLOPT_TLSAUTH_PASSWORD","",""],[18,"CURLOPT_TLSAUTH_TYPE","",""],[18,"CURLOPT_TRANSFER_ENCODING","",""],[18,"CURLOPT_CLOSESOCKETFUNCTION","",""],[18,"CURLOPT_CLOSESOCKETDATA","",""],[18,"CURLOPT_GSSAPI_DELEGATION","",""],[18,"CURLOPT_DNS_SERVERS","",""],[18,"CURLOPT_ACCEPTTIMEOUT_MS","",""],[18,"CURLOPT_TCP_KEEPALIVE","",""],[18,"CURLOPT_TCP_KEEPIDLE","",""],[18,"CURLOPT_TCP_KEEPINTVL","",""],[18,"CURLOPT_SSL_OPTIONS","",""],[18,"CURLOPT_MAIL_AUTH","",""],[18,"CURLOPT_SASL_IR","",""],[18,"CURLOPT_XFERINFOFUNCTION","",""],[18,"CURLOPT_XOAUTH2_BEARER","",""],[18,"CURLOPT_DNS_INTERFACE","",""],[18,"CURLOPT_DNS_LOCAL_IP4","",""],[18,"CURLOPT_DNS_LOCAL_IP6","",""],[18,"CURLOPT_LOGIN_OPTIONS","",""],[18,"CURLOPT_SSL_ENABLE_NPN","",""],[18,"CURLOPT_SSL_ENABLE_ALPN","",""],[18,"CURLOPT_EXPECT_100_TIMEOUT_MS","",""],[18,"CURLOPT_PROXYHEADER","",""],[18,"CURLOPT_HEADEROPT","",""],[18,"CURLOPT_POST301","",""],[18,"CURLOPT_SSLKEYPASSWD","",""],[18,"CURLOPT_FTPAPPEND","",""],[18,"CURLOPT_FTPLISTONLY","",""],[18,"CURLOPT_FTP_SSL","",""],[18,"CURLOPT_SSLCERTPASSWD","",""],[18,"CURLOPT_KRB4LEVEL","",""],[18,"CURLOPT_READDATA","",""],[18,"CURLOPT_WRITEDATA","",""],[18,"CURLOPT_HEADERDATA","",""],[18,"CURLOPT_XFERINFODATA","",""]],"paths":[[1,"curl_version_info_data"],[2,"CURLversion"],[2,"CURLcode"]]};

searchIndex['log'] = {"items":[[0,"","log","Utilities for program-wide and customizable logging"],[1,"LogLevel","","Wraps the log level with fmt implementations."],[1,"LogRecord","","A LogRecord is created by the logging macros, and passed as the only\nargument to Loggers."],[11,"module_path","","The module path of where the LogRecord originated.",0],[11,"level","","The LogLevel of this record.",0],[11,"args","","The arguments from the log line.",0],[11,"file","","The file of where the LogRecord originated.",0],[11,"line","","The line number of where the LogRecord originated.",0],[3,"set_logger","","Replaces the task-local logger with the specified logger, returning the old\nlogger."],[0,"macros","","Logging macros"],[18,"MAX_LOG_LEVEL","","Maximum logging level of a module that can be specified. Common logging\nlevels are found in the DEBUG/INFO/WARN/ERROR constants."],[18,"DEBUG","","Debug log level"],[18,"INFO","","Info log level"],[18,"WARN","","Warn log level"],[18,"ERROR","","Error log level"],[6,"Logger","","A trait used to represent an interface to a task-local logger. Each task\ncan have its own custom logger which can respond to logging messages\nhowever it likes."],[9,"log","","Logs a single message described by the `record`.",1],[10,"partial_cmp","","",2],[10,"lt","","",2],[10,"le","","",2],[10,"gt","","",2],[10,"ge","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",2],[10,"fmt","","",0],[15,"log!","","The standard logging macro"],[15,"error!","","A convenience macro for logging at the error log level."],[15,"warn!","","A convenience macro for logging at the warning log level."],[15,"info!","","A convenience macro for logging at the info log level."],[15,"debug!","","A convenience macro for logging at the debug log level. This macro can also\nbe omitted at compile time by passing `--cfg ndebug` to the compiler. If\nthis option is not passed, then debug statements will be compiled."],[15,"log_enabled!","","A macro to test whether a log level is enabled for the current module."]],"paths":[[1,"LogRecord"],[6,"Logger"],[1,"LogLevel"]]};

searchIndex['time'] = {"items":[[0,"","time","Simple time handling."],[1,"Timespec","","A record specifying a time value in seconds and nanoseconds."],[11,"sec","","",0],[11,"nsec","","",0],[1,"PreciseTime","","An opaque structure representing a moment in time."],[1,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on),\nalso called a broken-down time value."],[11,"tm_sec","","Seconds after the minute - [0, 60]",1],[11,"tm_min","","Minutes after the hour - [0, 59]",1],[11,"tm_hour","","Hours after midnight - [0, 23]",1],[11,"tm_mday","","Day of the month - [1, 31]",1],[11,"tm_mon","","Months since January - [0, 11]",1],[11,"tm_year","","Years since 1900",1],[11,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1],[11,"tm_yday","","Days since January 1 - [0, 365]",1],[11,"tm_isdst","","Daylight Saving Time flag.",1],[11,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any\nadjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example,\nfor U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1],[11,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1],[1,"TmFmt","","A wrapper around a `Tm` and format string that implements Show."],[2,"ParseError","",""],[12,"InvalidSecond","","",2],[12,"InvalidMinute","","",2],[12,"InvalidHour","","",2],[12,"InvalidDay","","",2],[12,"InvalidMonth","","",2],[12,"InvalidYear","","",2],[12,"InvalidDayOfWeek","","",2],[12,"InvalidDayOfMonth","","",2],[12,"InvalidDayOfYear","","",2],[12,"InvalidZoneOffset","","",2],[12,"InvalidTime","","",2],[12,"MissingFormatConverter","","",2],[12,"InvalidFormatSpecifier","","",2],[12,"UnexpectedCharacter","","",2],[3,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z."],[3,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch."],[3,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch."],[3,"tzset","",""],[3,"empty_tm","",""],[3,"at_utc","","Returns the specified time in UTC"],[3,"now_utc","","Returns the current time in UTC"],[3,"at","","Returns the specified time in the local timezone"],[3,"now","","Returns the current time in the local timezone"],[3,"strptime","","Parses the time from the string according to the format string."],[3,"strftime","","Formats the time according to the format string."],[10,"fmt","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"new","","",0],[4,"Output","",""],[10,"add","","",0],[4,"Output","",""],[10,"sub","","",0],[4,"Output","",""],[10,"sub","","",0],[10,"clone","","",3],[10,"now","","Returns a `PreciseTime` representing the current moment in time.",3],[10,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",3],[10,"fmt","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[4,"Output","",""],[10,"add","","The resulting Tm is in UTC.",1],[4,"Output","",""],[10,"sub","","The resulting Tm is in UTC.",1],[10,"partial_cmp","","",1],[10,"cmp","","",1],[10,"to_timespec","","Convert time to the seconds from January 1, 1970",1],[10,"to_local","","Convert time to the local timezone",1],[10,"to_utc","","Convert time to the UTC",1],[10,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1],[10,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1],[10,"strftime","","Formats the time according to the format string.",1],[10,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1],[10,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1],[10,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",2],[10,"fmt","","",4]],"paths":[[1,"Timespec"],[1,"Tm"],[2,"ParseError"],[1,"PreciseTime"],[1,"TmFmt"]]};

searchIndex['openssl-sys'] = {"items":[[0,"","openssl-sys",""],[1,"EVP_MD_CTX","",""],[1,"HMAC_CTX","",""],[1,"X509V3_CTX","",""],[1,"BIGNUM","",""],[11,"d","","",0],[11,"top","","",0],[11,"dmax","","",0],[11,"neg","","",0],[11,"flags","","",0],[3,"init","",""],[3,"BIO_eof","",""],[3,"ASN1_INTEGER_set","",""],[3,"ASN1_STRING_type_new","",""],[3,"ASN1_TIME_free","",""],[3,"BIO_ctrl","",""],[3,"BIO_free_all","",""],[3,"BIO_new","",""],[3,"BIO_read","",""],[3,"BIO_write","",""],[3,"BIO_s_mem","",""],[3,"BN_new","",""],[3,"BN_dup","",""],[3,"BN_clear_free","",""],[3,"BN_CTX_new","",""],[3,"BN_CTX_free","",""],[3,"BN_num_bits","",""],[3,"BN_set_negative","",""],[3,"BN_set_word","",""],[3,"BN_add","",""],[3,"BN_div","",""],[3,"BN_exp","",""],[3,"BN_gcd","",""],[3,"BN_mod_add","",""],[3,"BN_mod_exp","",""],[3,"BN_mod_inverse","",""],[3,"BN_mod_mul","",""],[3,"BN_mod_sqr","",""],[3,"BN_mod_sub","",""],[3,"BN_mul","",""],[3,"BN_nnmod","",""],[3,"BN_add_word","",""],[3,"BN_sub_word","",""],[3,"BN_mul_word","",""],[3,"BN_div_word","",""],[3,"BN_mod_word","",""],[3,"BN_sqr","",""],[3,"BN_sub","",""],[3,"BN_clear_bit","",""],[3,"BN_is_bit_set","",""],[3,"BN_lshift","",""],[3,"BN_lshift1","",""],[3,"BN_mask_bits","",""],[3,"BN_rshift","",""],[3,"BN_set_bit","",""],[3,"BN_rshift1","",""],[3,"BN_cmp","",""],[3,"BN_ucmp","",""],[3,"BN_generate_prime_ex","",""],[3,"BN_is_prime_ex","",""],[3,"BN_is_prime_fasttest_ex","",""],[3,"BN_rand","",""],[3,"BN_pseudo_rand","",""],[3,"BN_rand_range","",""],[3,"BN_pseudo_rand_range","",""],[3,"BN_bin2bn","",""],[3,"BN_bn2bin","",""],[3,"BN_dec2bn","",""],[3,"BN_bn2dec","",""],[3,"BN_hex2bn","",""],[3,"BN_bn2hex","",""],[3,"CRYPTO_num_locks","",""],[3,"CRYPTO_set_locking_callback","",""],[3,"CRYPTO_free","",""],[3,"CRYPTO_memcmp","",""],[3,"ERR_get_error","",""],[3,"ERR_lib_error_string","",""],[3,"ERR_func_error_string","",""],[3,"ERR_reason_error_string","",""],[3,"ERR_load_crypto_strings","",""],[3,"EVP_md5","",""],[3,"EVP_ripemd160","",""],[3,"EVP_sha1","",""],[3,"EVP_sha224","",""],[3,"EVP_sha256","",""],[3,"EVP_sha384","",""],[3,"EVP_sha512","",""],[3,"EVP_aes_128_cbc","",""],[3,"EVP_aes_128_ecb","",""],[3,"EVP_aes_256_cbc","",""],[3,"EVP_aes_256_ecb","",""],[3,"EVP_rc4","",""],[3,"EVP_CIPHER_CTX_new","",""],[3,"EVP_CIPHER_CTX_set_padding","",""],[3,"EVP_CIPHER_CTX_free","",""],[3,"EVP_CipherInit","",""],[3,"EVP_CipherUpdate","",""],[3,"EVP_CipherFinal","",""],[3,"EVP_DigestInit","",""],[3,"EVP_DigestInit_ex","",""],[3,"EVP_DigestUpdate","",""],[3,"EVP_DigestFinal","",""],[3,"EVP_DigestFinal_ex","",""],[3,"EVP_MD_CTX_create","",""],[3,"EVP_MD_CTX_destroy","",""],[3,"EVP_PKEY_new","",""],[3,"EVP_PKEY_free","",""],[3,"EVP_PKEY_assign","",""],[3,"EVP_PKEY_get1_RSA","",""],[3,"EVP_PKEY_set1_RSA","",""],[3,"HMAC_CTX_init","",""],[3,"HMAC_Init_ex","",""],[3,"HMAC_Final","",""],[3,"HMAC_Update","",""],[3,"HMAC_CTX_cleanup","",""],[3,"PEM_read_bio_X509","",""],[3,"PEM_write_bio_PrivateKey","",""],[3,"PEM_write_bio_X509","",""],[3,"PKCS5_PBKDF2_HMAC_SHA1","",""],[3,"RAND_bytes","",""],[3,"RSA_generate_key","",""],[3,"RSA_private_decrypt","",""],[3,"RSA_public_encrypt","",""],[3,"RSA_sign","",""],[3,"RSA_size","",""],[3,"RSA_verify","",""],[3,"SSL_library_init","",""],[3,"SSL_load_error_strings","",""],[3,"SSLv3_method","",""],[3,"TLSv1_method","",""],[3,"SSLv23_method","",""],[3,"SSL_new","",""],[3,"SSL_free","",""],[3,"SSL_set_bio","",""],[3,"SSL_get_rbio","",""],[3,"SSL_get_wbio","",""],[3,"SSL_accept","",""],[3,"SSL_connect","",""],[3,"SSL_ctrl","",""],[3,"SSL_get_error","",""],[3,"SSL_read","",""],[3,"SSL_write","",""],[3,"SSL_get_ex_data_X509_STORE_CTX_idx","",""],[3,"SSL_get_SSL_CTX","",""],[3,"SSL_get_current_compression","",""],[3,"SSL_get_peer_certificate","",""],[3,"SSL_COMP_get_name","",""],[3,"SSL_CTX_new","",""],[3,"SSL_CTX_free","",""],[3,"SSL_CTX_set_verify","",""],[3,"SSL_CTX_set_verify_depth","",""],[3,"SSL_CTX_load_verify_locations","",""],[3,"SSL_CTX_get_ex_new_index","",""],[3,"SSL_CTX_set_ex_data","",""],[3,"SSL_CTX_get_ex_data","",""],[3,"SSL_CTX_use_certificate_file","",""],[3,"SSL_CTX_use_PrivateKey_file","",""],[3,"SSL_CTX_set_cipher_list","",""],[3,"X509_add_ext","",""],[3,"X509_digest","",""],[3,"X509_free","",""],[3,"X509_get_serialNumber","",""],[3,"X509_get_subject_name","",""],[3,"X509_gmtime_adj","",""],[3,"X509_new","",""],[3,"X509_set_issuer_name","",""],[3,"X509_set_notAfter","",""],[3,"X509_set_notBefore","",""],[3,"X509_set_version","",""],[3,"X509_set_pubkey","",""],[3,"X509_sign","",""],[3,"X509_EXTENSION_free","",""],[3,"X509_NAME_add_entry_by_txt","",""],[3,"X509_NAME_get_index_by_NID","",""],[3,"X509_NAME_get_entry","",""],[3,"X509_NAME_ENTRY_get_data","",""],[3,"ASN1_STRING_to_UTF8","",""],[3,"X509_STORE_CTX_get_current_cert","",""],[3,"X509_STORE_CTX_get_error","",""],[3,"X509_STORE_CTX_get_ex_data","",""],[3,"X509V3_EXT_conf_nid","",""],[3,"X509V3_set_ctx","",""],[3,"i2d_RSA_PUBKEY","",""],[3,"d2i_RSA_PUBKEY","",""],[3,"i2d_RSAPrivateKey","",""],[3,"d2i_RSAPrivateKey","",""],[0,"probe","",""],[1,"ProbeResult","openssl-sys::probe",""],[11,"cert_file","","",1],[11,"cert_dir","","",1],[3,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be\nfound."],[3,"init_ssl_cert_env_vars","",""],[3,"probe","",""],[4,"ASN1_INTEGER","openssl-sys",""],[4,"ASN1_STRING","",""],[4,"ASN1_TIME","",""],[4,"BIO","",""],[4,"BIO_METHOD","",""],[4,"BN_CTX","",""],[4,"COMP_METHOD","",""],[4,"CRYPTO_EX_DATA","",""],[4,"ENGINE","",""],[4,"EVP_CIPHER","",""],[4,"EVP_CIPHER_CTX","",""],[4,"EVP_MD","",""],[4,"EVP_PKEY","",""],[4,"EVP_PKEY_CTX","",""],[4,"RSA","",""],[4,"SSL","",""],[4,"SSL_CTX","",""],[4,"SSL_METHOD","",""],[4,"X509","",""],[4,"X509_CRL","",""],[4,"X509_EXTENSION","",""],[4,"X509_NAME","",""],[4,"X509_NAME_ENTRY","",""],[4,"X509_REQ","",""],[4,"X509_STORE_CTX","",""],[4,"CRYPTO_EX_new","",""],[4,"CRYPTO_EX_dup","",""],[4,"CRYPTO_EX_free","",""],[4,"PasswordCallback","",""],[18,"BIO_CTRL_EOF","",""],[18,"CRYPTO_LOCK","",""],[18,"MBSTRING_ASC","",""],[18,"MBSTRING_BMP","",""],[18,"MBSTRING_FLAG","",""],[18,"MBSTRING_UNIV","",""],[18,"MBSTRING_UTF8","",""],[18,"NID_ext_key_usage","",""],[18,"NID_key_usage","",""],[18,"SSL_CTRL_SET_TLSEXT_HOSTNAME","",""],[18,"SSL_ERROR_NONE","",""],[18,"SSL_ERROR_SSL","",""],[18,"SSL_ERROR_SYSCALL","",""],[18,"SSL_ERROR_WANT_ACCEPT","",""],[18,"SSL_ERROR_WANT_CONNECT","",""],[18,"SSL_ERROR_WANT_READ","",""],[18,"SSL_ERROR_WANT_WRITE","",""],[18,"SSL_ERROR_WANT_X509_LOOKUP","",""],[18,"SSL_ERROR_ZERO_RETURN","",""],[18,"SSL_VERIFY_NONE","",""],[18,"SSL_VERIFY_PEER","",""],[18,"TLSEXT_NAMETYPE_host_name","",""],[18,"V_ASN1_GENERALIZEDTIME","",""],[18,"V_ASN1_UTCTIME","",""],[18,"X509_FILETYPE_ASN1","",""],[18,"X509_FILETYPE_DEFAULT","",""],[18,"X509_FILETYPE_PEM","",""],[18,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","",""],[18,"X509_V_ERR_AKID_SKID_MISMATCH","",""],[18,"X509_V_ERR_APPLICATION_VERIFICATION","",""],[18,"X509_V_ERR_CERT_CHAIN_TOO_LONG","",""],[18,"X509_V_ERR_CERT_HAS_EXPIRED","",""],[18,"X509_V_ERR_CERT_NOT_YET_VALID","",""],[18,"X509_V_ERR_CERT_REJECTED","",""],[18,"X509_V_ERR_CERT_REVOKED","",""],[18,"X509_V_ERR_CERT_SIGNATURE_FAILURE","",""],[18,"X509_V_ERR_CERT_UNTRUSTED","",""],[18,"X509_V_ERR_CRL_HAS_EXPIRED","",""],[18,"X509_V_ERR_CRL_NOT_YET_VALID","",""],[18,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","",""],[18,"X509_V_ERR_CRL_SIGNATURE_FAILURE","",""],[18,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","",""],[18,"X509_V_ERR_DIFFERENT_CRL_SCOPE","",""],[18,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","",""],[18,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","",""],[18,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","",""],[18,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","",""],[18,"X509_V_ERR_EXCLUDED_VIOLATION","",""],[18,"X509_V_ERR_INVALID_CA","",""],[18,"X509_V_ERR_INVALID_EXTENSION","",""],[18,"X509_V_ERR_INVALID_NON_CA","",""],[18,"X509_V_ERR_INVALID_POLICY_EXTENSION","",""],[18,"X509_V_ERR_INVALID_PURPOSE","",""],[18,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","",""],[18,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","",""],[18,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","",""],[18,"X509_V_ERR_NO_EXPLICIT_POLICY","",""],[18,"X509_V_ERR_OUT_OF_MEM","",""],[18,"X509_V_ERR_PATH_LENGTH_EXCEEDED","",""],[18,"X509_V_ERR_PERMITTED_VIOLATION","",""],[18,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","",""],[18,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","",""],[18,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","",""],[18,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","",""],[18,"X509_V_ERR_SUBTREE_MINMAX","",""],[18,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","",""],[18,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","",""],[18,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","",""],[18,"X509_V_ERR_UNABLE_TO_GET_CRL","",""],[18,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","",""],[18,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","",""],[18,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","",""],[18,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","",""],[18,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","",""],[18,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","",""],[18,"X509_V_ERR_UNNESTED_RESOURCE","",""],[18,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","",""],[18,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","",""],[18,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","",""],[18,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","",""],[18,"X509_V_OK","",""]],"paths":[[1,"BIGNUM"],[1,"ProbeResult"]]};

searchIndex['libz-sys'] = {"items":[],"paths":[]};

searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst case performance. The specific syntax supported is\ndocumented further down."],[1,"Error","","Error corresponds to something that can go wrong while parsing\na regular expression."],[11,"pos","","The *approximate* character index of where the error occurred.",0],[11,"msg","","A message describing the error.",0],[1,"Captures","","Captures represents a group of captured strings for a single match."],[1,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression."],[1,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression."],[1,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression."],[1,"FindMatches","","An iterator over all non-overlapping matches for a particular string."],[1,"NoExpand","","NoExpand indicates literal string replacement."],[1,"RegexSplits","","Yields all substrings delimited by a regular expression match."],[1,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match."],[2,"Regex","","A compiled regular expression"],[3,"quote","","Escapes all regular expression meta characters in `text`."],[3,"is_match","","Tests if the given regular expression matches somewhere in the text given."],[10,"fmt","","",0],[10,"clone","","",1],[10,"fmt","","Shows the original regular expression.",1],[10,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1],[10,"is_match","","Returns true if and only if the regex matches the string given.",1],[10,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1],[10,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1],[10,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1],[10,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1],[10,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1],[10,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1],[10,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1],[10,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1],[10,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1],[10,"as_str","","Returns the original string of this regex.",1],[10,"reg_replace","","",2],[10,"next","","",3],[10,"next","","",4],[10,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5],[10,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",5],[10,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",5],[10,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5],[10,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5],[10,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5],[10,"len","","Returns the number of captured groups.",5],[10,"is_empty","","Returns if there are no captured groups.",5],[10,"next","","",6],[10,"next","","",7],[10,"next","","",8],[10,"next","","",9],[6,"Replacer","","Replacer describes types that can be used to replace matches in a string."],[9,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",10]],"paths":[[1,"Error"],[2,"Regex"],[1,"NoExpand"],[1,"RegexSplits"],[1,"RegexSplitsN"],[1,"Captures"],[1,"SubCaptures"],[1,"SubCapturesPos"],[1,"FindCaptures"],[1,"FindMatches"],[6,"Replacer"]]};

searchIndex['gcc'] = {"items":[[0,"","gcc",""],[1,"Config","","Extra configuration to pass to gcc."],[11,"include_directories","","Directories where gcc will look for header files.",0],[11,"definitions","","Additional definitions (`-DKEY` or `-DKEY=VALUE`).",0],[11,"objects","","Additional object files to link into the final archive",0],[11,"flags","","Additional flags and parameter to pass to the compiler",0],[3,"compile_library","","Compile a library from the given set of input C files."],[10,"default","","",0]],"paths":[[1,"Config"]]};

searchIndex['pkg-config'] = {"items":[[0,"","pkg-config",""],[1,"Options","",""],[11,"statik","","",0],[11,"atleast_version","","",0],[3,"target_supported","",""],[3,"find_library","",""],[3,"find_library_opts","",""],[3,"default_options","",""]],"paths":[[1,"Options"]]};

initSearch(searchIndex);
